************** SIMPLE REBASE EXAMPLE****************************************
****************************************************************************

scenario

a) existing master branch
b) create feature branch
c) perform changes in feature branch
d) switch back to master branch
e) perform changes in master branch
f) rebase changes to feature branch


1.) change to starter-web-1 project
2.) git status -> clean working directory
3.) clean working directory
4.) git checkout -b myfeature
5.) npp humans.txt -> edit humans.txt file:

THANKS section: "All my students!" - MYFEATURE-BRANCH

6.) git status -> modified humans.txt file
7.) git commit -am "Saying thanks to all my students" -> fast commit

8.) git checkout master -> switch back to master
9.) npp README.md -> edit readme.md file

STARTER WEB PRO: "Adding a line for rebase example" - MASTER-BRANCH

10.) git status -> modified readme.md file
11.) git commit -am "Adding oneliner to readme for rabase example" -> fast commit
12.) clear
13.) git log --oneline --decorate --all --graph -> shows history

REBASING
-> work in myfeature-branch is undone, but we want to take part of
  changes made in master branch in myfeature-branch !!

-> we want to rabase master into myfeature branch

14.) git checkout myfeature -> switch back to myfeature branch
15.) git rebase master -> actual branch: myfeature -> source branch: master
16.) git log --oneline --decorate --all --graph -> 
17.) npp README.md -> edit readme.md file - MYFEATURE-BRANCH

-> readme.md changes displaye performed on master !
                          
STARTER WEB PRO: "then more changes from myfeature branch too" - MYFEATURE-BRANCH

18.) git status: modified README.md file on myfeature branch
19.) git commit -am "Adding another change after rebase" -  MYFEATURE-BRANCH
20.) git log --oneline --decorate --all --graph

ALL WORK IS DONE - MERGE CHANGES FROM MYFEATURE BRANCH TO MASTER !

21.)git checkout master -> switch back to master
22.) git diff master myfeature (
23.) git merge myfeature
24.) git log --oneline --decorate --all --graph -> branches synchronized !
25.) git branch -d myfeature -> delete no more needed branch

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
************** SETUP FOR REBASING CONFLICT****************************************
**********************************************************************************


1.) change to starter-web-1 project
2.) git status -> clean working directory
3.) npp simple.html -> edit simple.html file (MASTER BRANCH)
add comment "Adding changes before rebasing conflicts"

4.) git commit -am "mb before rebase conflicts" -> commit changes
5.) git checkout -b bigtrouble -> create and switch to new branch BIGTROUBLE
6.) npp simple.html -> edit conflicting changes ib simple.html file (BIGTROUBLE BRANCH)

comment: "These are from the feature branch"
title: "Lots of Trouble"
body : "Just nothing but trouble"

7.) git commit -am "fb adding some trouble to simple.html" -> commit changes

8.) git checkout master -> switch back to master branch

9.) npp simple.html -> edit simple.html file again (MASTER BRANCH)

comment: "Some silly changes from master branch"
title: "Silly Changes from Master"
body: "Just stuff now, not sure if we would replace this or not"

10.) git commit -am "mb conflicting changes brewing"pwd

11.) git status -> clean working directory
12.) git log --oneline --decorate --all --graph -> shows 2 commits which are not sync 

--------------------------------------------------------------------------------------------
************** ABORT A REBASE*****************************************************
**********************************************************************************

1.) change to starter-web-1 project
2.) git checkout bigtrouble -> switch to feauture branch "BIG-TROUBLE"
3.) clear
4.) git difftool master bigtrouble -> display conflicts visually 
5.) git rebase master -> cause of conflicts, doesn't work
6.) git rebase --abort -> abort the rebase
7.) git status -> we are still on the bigtrouble branch
8.) git log --oneline --decorate --all --graph -> shows still branches that are deverged

-----------------------------------------------------------------------------------
************** REBASE CONFLICT AND RESOLUTION*****************************************************
**************************************************************************************************
1.) change to starter-web-1 project -> Branch "BIG-TROUBLE" should be active
2.) git status -> clean working directory
3.) git log --oneline --decorate --all --graph -> shows 2 commits which are not sync 
4.) git rebase master -> conflict -> shows conflicting state during the rebase !
5.) git mergetool -> resolving the conflicts and save
6.) git status -> modified simple.html file
7.) git rebase --continue
8.) git log --oneline --decorate --all --graph -> both branches are synched
9.) npp simple.html -> edit simple.html file again -> On Feature Branch "BIG-TROUBLE"
10.) git commit -am "Adding changes after rebasing conflict"
11.) git status -> clean working directory
12.) git log --oneline --decorate --all --graph -> shows latest commit on Branch "BIG-TROUBLE"

-> INTEGRATING LATEST CHANGES FROM BIG TROUBLE INTO MASTER

13.) git checkout master -> switch back to master branch
14.) git merge bigtrouble -> merge changes to master branch
15.) git log --oneline --decorate --all --graph -> master and feature branch point to the same commit

-------------------------------------------------------------------------------------------------------

************** PULL WITH REBASE*********************************************
****************************************************************************

scenario: files were changes on GITHUB, we want to rebase these changes
          on top of our local master branch and don't want to lose our 
          changes on local master branch

1.) change to starter-web-1 project
2.) git status -> clean working directory  on master branch

SYNCHRONISING WITH GITHUB

3.) git pull origin master - all up to date
4.) git push origin master -> push up the changes to GITHub
5.) git status -> up to date with origin master

REBASE CHANGES FROM GITHUB TO LOCAL GIT REPOSITORY

A -CHANGES ON lOCAL GIT ON MASTER BRANCH on SIMPLE-HTML-FILE

6.) changes on local master branch in simple.html:

copyright: "Git Training 2014, All righs reserved"

7.) git commit -am "local: updating simpl.html"
8.) git status -> clean working directory on local master branch

B -CHANGES ON GITHUB ORIGINA MASTER BRANCH on INDEX-HTML-FILE

9.) changes on remote origin master branch in index.html:

button type: from "Sign" in to "Login"

10.) commit changes on GitHub -> "remote minor changes on index.html"
11.) git status -> "Your branch is ahead of origin master by 1 commit -> can not be the case 
12.) git fetch origin master -> updates the refereces between remote ans local git repository
13.) git status -> local and 'origin/master' are diverged,
14.) git pull --rebase origin master -> Applying: local: updating simple.html

-> WE HAVE REBASED CHANGES FROM GITHUB ON THE TOP OF OUR LOCAL GIT REPOSITORY

15.) git log --oneline --decorate --all --graph ->
------------------------------------------------