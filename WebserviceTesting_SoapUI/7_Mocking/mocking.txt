Mock-Service: Simulation of actual web service

- endpoint has to be pointed to mock service


------------------------------------------------------------------

********************** Creating a mock service *********************
*********************************************************************

Project :Mock Services
WSDL: http://www.thomas-bayer.com/axis2/services/BLZService?wsdl

------------------------------------------------------------------

1.) Select interface: here "BLZServiceSOAP11Binding
2.) Select "Generate Virtual Service"
3.) Select operation to mock
4.) specify path -> "/LocalBLZService
5.) specify port -> 8089
6.) Check Endpoint -> mock endpoint endpoint will be added to BLZServiceSOAP11Binding service
   
   -> http://localhost:8089/LocalBLZService

7.) Virtual Service will be added to "Service V tab"

8.) Virtual Service can be started and stopped here

9.) edit response -> here response 1

bezeichnung: ABC Bank
BIC: BIC1234
BLZ: Hyderabend
BLZ: 738837

10.) For each operation here" a "Dispacht Style strategy" can be selected

- sequence
- random
- query match 
- xpath 
- script

---------------------------------------------------------------------------------

********************** Creating dynamic Virtual Service using groovy *********************
**************************************************************************************

Codes: 
55010111
55010800
55020100
55010800
20010020




scneario: retrieve a value in request and return the correct virtual response back
          by using groovy script

creating a groovy Script dispatcher is used to select a response based on the incoming request.


1.) Create virtual responses by using real interface and copy the response to 
    virtual response

-> created responses:

"55010111 Response"
"20010020 Response"
"55010800 Response"
"55020100 Response"

20010020 Response

---------------------------------------------


// 1  - import Groovy Util class
import com.eviware.soapui.support.GroovyUtils

// 2- create instance of groovy utils
def groovyUtils = new GroovyUtils(context)

// 3- Read the request xml-file -> only raw message
def requestMessage = mockRequest.requestContent



// 4- Converty raw request message to xml
def requestXml = groovyUtils.getXmlHolder(requestMessage)

//5. get the needed node from request xml hier -> blz.node
def blz = requestXml.getNodeValue('//blz:blz')
log.info "blz = $blz"


//6 - based on BLZ code give back the corresponsing xml response
// if request xml contains blz = 55010111 return "55010111 Response"

return "$blz Response"

------------------------------------------------------------------------

Assignment:

Create mock service "Stock Quote Mock " web service

http://ws.cdyne.com/delayedstockquote/delayedstockquote.asmx?WSDL


Task 2: Create mock responses for GOOG,YHOO,INFY,AAPL codes.

GOOG Response
YHOO Response
INFY Response
AAPL Response


Task 3: Use Groovy script to dynamically dispatch response based on stock code
-------------------------------------------------------------
Virtual Service:

Path: /StockService
Port: 9094

GetQuote-Operation

Endpoint: 

https://localhost:8093/StockService


---------------------------------------------------------------
Script: 

// 1  - import Groovy Util class
import com.eviware.soapui.support.GroovyUtils

// 2- create instance of groovy utils
def groovyUtils = new GroovyUtils(context)

// 3- Read the request xml-file -> only raw message
def requestMessage = mockRequest.requestContent



// 4- Converty raw request message to xml
def requestXml = groovyUtils.getXmlHolder(requestMessage)

//5. get the needed node from request xml hier -> blz.node
def stockSymbol = requestXml.getNodeValue('//ws:StockSymbol')
log.info "StockSymbol = $stockSymbol"


//6 - based on BLZ code give back the corresponsing xml response
// if request xml contains blz = 55010111 return "55010111 Response"

return "$stockSymbol Response"














--------------------------------------------

Script Dispatcher Template:

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/



























