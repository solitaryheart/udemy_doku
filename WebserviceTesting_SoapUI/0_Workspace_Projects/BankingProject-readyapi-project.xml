<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="2a24a3d7-eaed-4f98-96b8-f7bb34cd8858" created="2.7.0" activeEnvironment="Default environment" name="MyProject" resourceRoot="" defaultScriptLanguage="Groovy" updated="2.7.0 2019-05-30T13:25:24Z" encryptionMode="Not encrypted" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value="XML"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Slack Channel(s)" value=""/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Test Suite Tags" value=""/>
  <con:entry key="Select Report Type" value="JUnit-Style report for automation"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Test Suite" value="TS08 Groovy Automation"/>
  <con:entry key="Run in-process" value="false"/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Test Case Tags" value=""/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Test Case" value="TC01_to test get Bank operation"/>
  <con:entry key="Slack Access Token" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\ReadyAPI-2.7.0\bin"/>
  <con:entry key="Environment" value="Default environment"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="${WORKSPACE}"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" id="0559df8a-891b-488a-b951-fa04799cab5c" wsaVersion="NONE" name="BLZServiceSOAP11Binding" type="wsdl" bindingName="{http://thomas-bayer.com/blz/}BLZServiceSOAP11Binding" soapVersion="1_1" anonymous="optional" definition="http://www.thomas-bayer.com/axis2/services/BLZService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://www.thomas-bayer.com/axis2/services/BLZService?wsdl"><con:part><con:url>http://www.thomas-bayer.com/axis2/services/BLZService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://thomas-bayer.com/blz/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:tns="http://thomas-bayer.com/blz/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/">
  <wsdl:documentation>BLZService</wsdl:documentation>
  <wsdl:types>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://thomas-bayer.com/blz/">
      <xsd:element name="getBank" type="tns:getBankType"/>
      <xsd:element name="getBankResponse" type="tns:getBankResponseType"/>
      <xsd:complexType name="getBankType">
        <xsd:sequence>
          <xsd:element name="blz" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="getBankResponseType">
        <xsd:sequence>
          <xsd:element name="details" type="tns:detailsType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="detailsType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bezeichnung" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bic" type="xsd:string"/>
          <xsd:element minOccurs="0" name="ort" type="xsd:string"/>
          <xsd:element minOccurs="0" name="plz" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="getBank">
    <wsdl:part name="parameters" element="tns:getBank"/>
  </wsdl:message>
  <wsdl:message name="getBankResponse">
    <wsdl:part name="parameters" element="tns:getBankResponse"/>
  </wsdl:message>
  <wsdl:portType name="BLZServicePortType">
    <wsdl:operation name="getBank">
      <wsdl:input message="tns:getBank"/>
      <wsdl:output message="tns:getBankResponse" wsaw:Action="http://thomas-bayer.com/blz/BLZService/getBankResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="BLZServiceSOAP11Binding" type="tns:BLZServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getBank">
      <soap:operation style="document" soapAction=""/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="BLZServiceSOAP12Binding" type="tns:BLZServicePortType">
    <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getBank">
      <soap12:operation style="document" soapAction=""/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="BLZServiceHttpBinding" type="tns:BLZServicePortType">
    <http:binding verb="POST"/>
    <wsdl:operation name="getBank">
      <http:operation location="BLZService/getBank"/>
      <wsdl:input>
        <mime:content part="getBank" type="text/xml"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="getBank" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="BLZService">
    <wsdl:port name="BLZServiceSOAP11port_http" binding="tns:BLZServiceSOAP11Binding">
      <soap:address location="http://www.thomas-bayer.com/axis2/services/BLZService"/>
    </wsdl:port>
    <wsdl:port name="BLZServiceSOAP12port_http" binding="tns:BLZServiceSOAP12Binding">
      <soap12:address location="http://www.thomas-bayer.com/axis2/services/BLZService"/>
    </wsdl:port>
    <wsdl:port name="BLZServiceHttpport" binding="tns:BLZServiceHttpBinding">
      <http:address location="http://www.thomas-bayer.com/axis2/services/BLZService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint></con:endpoints><con:operation id="f124cb29-ddc7-47cc-8624-4d16f8118a5a" isOneWay="false" action="" name="getBank" bindingOperationName="getBank" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="662cea77-b89f-4ceb-8cad-e7caa25d8ca7" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>20010020</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="8e0be924-e9eb-4a94-8314-0e6098eb641b" wsaVersion="NONE" name="BLZServiceSOAP12Binding" type="wsdl" bindingName="{http://thomas-bayer.com/blz/}BLZServiceSOAP12Binding" soapVersion="1_2" anonymous="optional" definition="http://www.thomas-bayer.com/axis2/services/BLZService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint></con:endpoints><con:operation id="bb8f487e-723a-4541-9033-a443b70f1587" isOneWay="false" action="" name="getBank" bindingOperationName="getBank" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="cd5e6e35-0dad-4e9e-aed3-5bd10a172234" wsaVersion="NONE" name="medicareSupplierServiceSoapBinding" type="wsdl" bindingName="{http://www.springframework.org/schema/beans}medicareSupplierServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://localhost:8080/services/medicareSupplierService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8080/services/medicareSupplierService?wsdl"><con:part><con:url>http://localhost:8080/services/medicareSupplierService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="medicareSupplierService" targetNamespace="http://www.springframework.org/schema/beans" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://www.springframework.org/schema/beans" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:ns2="http://schemas.xmlsoap.org/soap/http" xmlns:ns1="http://www.webservicex.net/">
  <wsdl:import location="http://localhost:8080/services/medicareSupplierService?wsdl=MediCareSupplierSoap.wsdl" namespace="http://www.webservicex.net/"></wsdl:import>
  <wsdl:binding name="medicareSupplierServiceSoapBinding" type="ns1:MediCareSupplierSoap">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetSupplierByZipCode">
      <soap:operation soapAction="http://www.webservicex.net/GetSupplierByZipCode" style="document"/>
      <wsdl:input name="GetSupplierByZipCode">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSupplierByZipCodeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSupplierByCity">
      <soap:operation soapAction="http://www.webservicex.net/GetSupplierByCity" style="document"/>
      <wsdl:input name="GetSupplierByCity">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSupplierByCityResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSupplierBySupplyType">
      <soap:operation soapAction="http://www.webservicex.net/GetSupplierBySupplyType" style="document"/>
      <wsdl:input name="GetSupplierBySupplyType">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSupplierBySupplyTypeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="medicareSupplierService">
    <wsdl:port binding="tns:medicareSupplierServiceSoapBinding" name="$Proxy88Port">
      <soap:address location="http://localhost:8080/services/medicareSupplierService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://localhost:8080/services/medicareSupplierService?wsdl=MediCareSupplierSoap.wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="MediCareSupplierSoap" targetNamespace="http://www.webservicex.net/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns1="http://www.webservicex.net/">
  <wsdl:types>
    <xs:schema elementFormDefault="qualified" targetNamespace="http://www.webservicex.net/" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.webservicex.net/">
      <xs:element name="GetSupplierByCity">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="City" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetSupplierByCityResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="GetSupplierByCityResult" type="xs:boolean"/>
            <xs:element name="SupplierDataLists" type="tns:SupplierDataList"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetSupplierBySupplyType">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="description" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetSupplierBySupplyTypeResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="GetSupplierBySupplyTypeResult" type="xs:boolean"/>
            <xs:element name="SupplierDataLists" type="tns:SupplierDataList"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetSupplierByZipCode">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="zip" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetSupplierByZipCodeResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="GetSupplierByZipCodeResult" type="xs:boolean"/>
            <xs:element name="SupplierDataLists" type="tns:SupplierDataList"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="SupplierDataList">
        <xs:sequence>
          <xs:element minOccurs="0" name="SupplierDatas" type="tns:ArrayOfSupplierData"/>
          <xs:element name="TotalRecords" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ArrayOfSupplierData">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SupplierData" type="tns:SupplierData"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SupplierData">
        <xs:sequence>
          <xs:element minOccurs="0" name="SupplierNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="CompanyName" type="xs:string"/>
          <xs:element minOccurs="0" name="Address1" type="xs:string"/>
          <xs:element minOccurs="0" name="Address2" type="xs:string"/>
          <xs:element minOccurs="0" name="City" type="xs:string"/>
          <xs:element minOccurs="0" name="State" type="xs:string"/>
          <xs:element minOccurs="0" name="Zip" type="xs:string"/>
          <xs:element minOccurs="0" name="ZipPlus4" type="xs:string"/>
          <xs:element minOccurs="0" name="Telephone" type="xs:string"/>
          <xs:element minOccurs="0" name="Description" type="xs:string"/>
          <xs:element minOccurs="0" name="IsSupplierParticipating" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetSupplierByZipCode">
    <wsdl:part element="ns1:GetSupplierByZipCode" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSupplierBySupplyType">
    <wsdl:part element="ns1:GetSupplierBySupplyType" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSupplierByZipCodeResponse">
    <wsdl:part element="ns1:GetSupplierByZipCodeResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSupplierByCity">
    <wsdl:part element="ns1:GetSupplierByCity" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSupplierBySupplyTypeResponse">
    <wsdl:part element="ns1:GetSupplierBySupplyTypeResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSupplierByCityResponse">
    <wsdl:part element="ns1:GetSupplierByCityResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="MediCareSupplierSoap">
    <wsdl:operation name="GetSupplierByZipCode">
      <wsdl:input message="ns1:GetSupplierByZipCode" name="GetSupplierByZipCode"></wsdl:input>
      <wsdl:output message="ns1:GetSupplierByZipCodeResponse" name="GetSupplierByZipCodeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSupplierByCity">
      <wsdl:input message="ns1:GetSupplierByCity" name="GetSupplierByCity"></wsdl:input>
      <wsdl:output message="ns1:GetSupplierByCityResponse" name="GetSupplierByCityResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSupplierBySupplyType">
      <wsdl:input message="ns1:GetSupplierBySupplyType" name="GetSupplierBySupplyType"></wsdl:input>
      <wsdl:output message="ns1:GetSupplierBySupplyTypeResponse" name="GetSupplierBySupplyTypeResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:8080/services/medicareSupplierService</con:endpoint></con:endpoints><con:operation id="47b44b32-bf9c-4e07-871d-a1a434fd222a" isOneWay="false" action="http://www.webservicex.net/GetSupplierByCity" name="GetSupplierByCity" bindingOperationName="GetSupplierByCity" type="Request-Response" outputName="GetSupplierByCityResponse" inputName="GetSupplierByCity" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="aa91057b-cd6f-4d52-8b50-f460cf7cdb60" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/services/medicareSupplierService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webservicex.net/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <web:GetSupplierByCity>\r
         <!--Optional:-->\r
         <web:City>?</web:City>\r
      </web:GetSupplierByCity>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webservicex.net/GetSupplierByCity"/></con:call></con:operation><con:operation id="29cceb71-284a-4fb4-b308-be19c7e4dd6f" isOneWay="false" action="http://www.webservicex.net/GetSupplierBySupplyType" name="GetSupplierBySupplyType" bindingOperationName="GetSupplierBySupplyType" type="Request-Response" outputName="GetSupplierBySupplyTypeResponse" inputName="GetSupplierBySupplyType" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="bd25170d-3c30-4141-b3f3-a698b57d950b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/services/medicareSupplierService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webservicex.net/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <web:GetSupplierBySupplyType>\r
         <!--Optional:-->\r
         <web:description>?</web:description>\r
      </web:GetSupplierBySupplyType>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webservicex.net/GetSupplierBySupplyType"/></con:call></con:operation><con:operation id="998e1b35-5029-4f38-be90-a24ba5fe1967" isOneWay="false" action="http://www.webservicex.net/GetSupplierByZipCode" name="GetSupplierByZipCode" bindingOperationName="GetSupplierByZipCode" type="Request-Response" outputName="GetSupplierByZipCodeResponse" inputName="GetSupplierByZipCode" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="3baa0d92-44be-4e36-ae9f-3ca6970c31ba" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/services/medicareSupplierService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webservicex.net/">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetSupplierByZipCode>
         <!--Optional:-->
         <web:zip>?</web:zip>
      </web:GetSupplierByZipCode>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webservicex.net/GetSupplierByZipCode"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite id="23760ac9-9af8-49da-a29f-7ed95bae13fb" name="TS01_Test suite to test bank service"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="404ca0bb-6aea-4174-b7dc-abf6a32ddd6e" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC01_to test get Bank operation" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" name="get Bank - Request for BLZ code_55010111" id="faf55113-e9ff-4ce1-b1ff-1348a2e755bc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="get Bank - Request for BLZ code_55010111" id="d33c7d14-7004-47b3-8c8c-81b31449692d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>${#TestSuite#blzCode}</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6e559613-3060-41a2-b2d2-4a0a6911e8f8" name="SOAP Response"/><con:assertion type="XPath Match" id="253021b2-26c4-4038-a6fe-c8605fae6483" name="XPath Match - validate bic code"><con:configuration><path>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:bic[1]</path><content>ESSEDE5F550</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match - validate plz" id="3ab2876e-c328-4a91-a647-bea0072c1393"><con:configuration><path>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:plz[1]</path><content>55116</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="599f74d4-69ca-4296-ab00-4ea625b60ecc" name="XPath Match - validate bezeichnung"><con:configuration><path>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:bezeichnung[1]</path><content>SEB</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Schema Compliance" id="3a50fe9d-fe06-47ea-a02f-940828d57f1a" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="cf6a2d10-e073-467a-9944-a35aeb1270e2" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>NTLM</con:selectedAuthProfile><con:preemptive>true</con:preemptive><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes><con:authType>NTLM</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ecd021d2-d2a0-4a54-a895-ccf62264ca36"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transfer_blz</con:name><con:sourceType>blzCode</con:sourceType><con:sourceStep>#TestSuite#</con:sourceStep><con:sourcePath/><con:targetType>blz</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transfer_bic</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>get Bank - Request for BLZ code_55010111</con:sourceStep><con:sourcePath>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:bic[1]</con:sourcePath><con:targetType>bic</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transfer_ort</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>get Bank - Request for BLZ code_55010111</con:sourceStep><con:sourcePath>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:ort[1]</con:sourcePath><con:targetType>ort</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transfer_plz</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>get Bank - Request for BLZ code_55010111</con:sourceStep><con:sourcePath>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:plz[1]</con:sourcePath><con:targetType>plz</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Properties" id="89e1efd6-f1e8-428f-9a25-9c66d149f10d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>blz</con:name><con:value>55010111</con:value></con:property><con:property><con:name>bic</con:name><con:value>ESSEDE5F550</con:value></con:property><con:property><con:name>ort</con:name><con:value>Mainz a Rhein</con:value></con:property><con:property><con:name>plz</con:name><con:value>55116</con:value></con:property></con:properties></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>ecd021d2-d2a0-4a54-a895-ccf62264ca36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="6740690f-0459-4cbf-97a6-b880828ab8a5" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC02_to test get Bank operation" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" id="17fc3be8-c864-4c79-a656-7ee45ac5c357" name="get Bank - Request for BLZ code_55010424"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="get Bank - Request for BLZ code_55010424" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="cacd12c8-9977-4167-93a9-a5785f551401"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>55010424</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c4d505b2-6558-48f1-a509-a1ac49a95516" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>blzCode</con:name><con:value>55010111</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="1a869b93-b448-4453-8f00-bb17c0f73e37" name="TS02_Test suite to test bank service"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="71126916-6c09-4eb6-b243-279604992886" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC03_to test get Bank operation" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" id="7af54336-9c16-4a4a-b1b6-3384e845f8e9" name="get Bank - Request for BLZ code_55010800"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="get Bank - Request for BLZ code_55010800" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="cacd12c8-9977-4167-93a9-a5785f551401"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>${#TestCase#blzCode}</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c4d505b2-6558-48f1-a509-a1ac49a95516" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>blzCode</con:name><con:value>55010800</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="8dd6b0cf-8add-4c4e-8ef4-db659dde757a" name="TS03_Test suite to test bank service"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="a5f8135e-9487-4790-bcf1-e24b80667622" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC04_to test get Bank operation" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" name="get Bank - Request for BLZ code_55020100" id="c2615c85-d986-4c53-8953-de6969c5475d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="get Bank - Request for BLZ code_55020100" id="d33c7d14-7004-47b3-8c8c-81b31449692d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>55020100</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="0234419a-4b61-45bb-a69e-ed4d39a2705d"/><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase id="099e0893-e7b4-4c4c-9315-14fece2fbf7e" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC05_to test get Bank operation" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" id="903fd6be-9858-4b87-ad4e-783bb84ea958" name="get Bank - Request for BLZ code_55020500"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="get Bank - Request for BLZ code_55020500" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="cacd12c8-9977-4167-93a9-a5785f551401"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>55010424</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c4d505b2-6558-48f1-a509-a1ac49a95516" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="8e6b69e9-120e-4a14-ac00-8f9d08565efb" name="TS04 test suite for supplier service"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="712f2444-8925-415e-bda6-dc680ae82d3f" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC 01 supplier by zip code" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="d21788c4-31ab-4ad0-b670-fb283440c170" name="TS05 test suite for supplier service"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="b9f5ba67-9593-4d9b-a241-b34b7df13b91" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC01 Supplier_ByZipCode" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" id="45a66df4-b011-409b-b132-f37d5f44d687" name="GetSupplierByZipCode - Request"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>medicareSupplierServiceSoapBinding</con:interface><con:operation>GetSupplierByZipCode</con:operation><con:request name="GetSupplierByZipCode - Request" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="bf9f9aff-b338-4d6d-bf11-feea53c2c480"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/services/medicareSupplierService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webservicex.net/">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetSupplierByZipCode>
         <!--Optional:-->
         <web:zip>75060</web:zip>
      </web:GetSupplierByZipCode>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d0956595-191f-4657-b8c6-b236c984bd02" name="SOAP Response"/><con:assertion type="XPath Match" id="36133474-eeb3-4314-8f67-f3919ac6a7ba" name="XPath Match - Count of suppliers should BE ZERO when zipcode !=75060"><con:configuration><path>declare namespace ns1='http://www.webservicex.net/';
count(//ns1:GetSupplierByZipCodeResponse[1]/ns1:SupplierDataLists[1]/ns1:SupplierDatas[1]/ns1:SupplierData[ns1:ZipPlus4!='75060'])</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webservicex.net/GetSupplierByZipCode"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="8ac9bee1-ab86-46eb-836c-085c8569da54" name="TS06_working with property concepts"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="842d7503-2436-435f-b34b-a18ad76a7cad" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC_working with properties" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" name="get Bank request" id="75b45164-3040-4f7b-a240-0951a69d9de7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="get Bank request" id="0578c627-0322-4d74-aa42-1ffd8dba8aa0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>55010111</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="e915f4c4-b6a5-47c4-9476-c203a5b828b9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transfer_bic</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>get Bank request</con:sourceStep><con:sourcePath>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:bic[1]</con:sourcePath><con:targetType>bic_code</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transfer_ort</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>get Bank request</con:sourceStep><con:sourcePath>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:ort[1]</con:sourcePath><con:targetType>ort_code</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transfer_plz</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>get Bank request</con:sourceStep><con:sourcePath>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:plz[1]</con:sourcePath><con:targetType>plz_code</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="Properties" id="5342640a-aebc-4428-949a-926f5ad2e02d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>bic_code</con:name><con:value>ESSEDE5F550</con:value></con:property><con:property><con:name>ort_code</con:name><con:value>Mainz a Rhein</con:value></con:property><con:property><con:name>plz_code</con:name><con:value>55116</con:value></con:property></con:properties></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>5342640a-aebc-4428-949a-926f5ad2e02d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>75b45164-3040-4f7b-a240-0951a69d9de7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="8604b59f-c9e7-4d5d-9b93-7f1cabb27737" name="TS07_GroovyBasics"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="5ea53b46-e638-49e3-b6ac-61fa96932022" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC01_Groovy Stuff" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Groovy Script - GroovyBasics" id="0970957b-2c31-4c72-a246-0fc18130a6d7"><con:settings/><con:config><script>// variable declaration

def name
String firstName, lastName, country

int age
double salary

firstName = 'John'
lastName='Mueller'

//printing to console



salary = 5000
age = 25
country = 'London'

log.info 'first name ' + firstName
log.info 'last name ' + lastName
log.warn 'age ' +age
log.error  'salary ' + salary
log.info 'country = ' +country

//use double quotest an $ to print values

log.info "country name  =  $country"

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Conditions" id="00691fb5-56fe-4d8a-8f11-9e10a53a2634"><con:settings/><con:config><script>boolean isPassed
String grade ='B'

isPassed = true

// I I'am passed my dad will buy me a bike

if(isPassed==true){
	log.info 'Congratulations'
} else{
	log.error 'Better luck next time'
}


//Handling multiple scnearios / condtions

//  A - car
//  B - bike
// C - nothing

if(grade=='A'){
	log.info ' You got a car !! '
}else if (grade == 'B'){
	log.warn 'You got a bike !!'
} else{
	log.error 'You got Nothing !!'
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Working with List" id="07228cb7-4248-4b4e-8d76-c42c4f6dc4c9"><con:settings/><con:config><script>//Wotking with List

def fruits =['Apple', 'Banana', 'Grape', 'Mango']

log.info "fruits = $fruits"

//Reading one by one

fruits.each{
	fruitName -> 
	log.info "Name is $fruitName"
}


//Searching for a special fruit in List

String fruitsIamLookingFor = 'Papaya'
boolean hasFruitInsideIt = fruits.contains(fruitsIamLookingFor)


if(hasFruitInsideIt==true){
	log.info "Gotcha !! found  $fruitsIamLookingFor in the list"
} else{
	log.error "Can't find fruit  $fruitsIamLookingFor in the list "
}

//Adding a fruit to list

fruits.add('Papaya')
fruits &lt;&lt; 'Pomegranate'

log.info '-----------------------------After adding-----------------'

hasFruitInsideIt = fruits.contains(fruitsIamLookingFor)
if(hasFruitInsideIt==true){
	log.info "Gotcha !! found  $fruitsIamLookingFor in the list"
} else{
	log.error "Can't find fruit  $fruitsIamLookingFor in the list "
}


fruits.remove('Papaya')

log.info '-----------------------------After removing-----------------'

hasFruitInsideIt = fruits.contains(fruitsIamLookingFor)
if(hasFruitInsideIt==true){
	log.info "Gotcha !! found  $fruitsIamLookingFor in the list"
} else{
	log.error "Can't find fruit  $fruitsIamLookingFor in the list "
}




</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Working with Map" id="5b7efd07-f173-4993-8e67-d0121617f60e"><con:settings/><con:config><script>//Define a Map with key value pairs

def countries = ['IND': 'India',
					   'USA': 'United States of America',
					   'SIN': 'Singapore', 'AUS': 'Australia',
					   'RUS':'Russia'
					   ]

log.info "countries - $countries"


//find a country key in the map
String countryIamLookingFor = 'IND'

boolean foundCountry = countries.containsKey(countryIamLookingFor)

log.info "Found country $countryIamLookingFor ? : $foundCountry"

//getting the country value  name
String countryName = countries.get(countryIamLookingFor)

log.info "Country name is $countryName"

//Adding an entry to MAP
countries.put('GB', 'Great Britain')
log.info countries
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Assertions" id="11a35086-571a-41ca-a36f-586001babbe0"><con:settings/><con:config><script>/// assertion - comparing expected value with actual value

expectedName = 'Jhon'
actualName = 'Jhon'

int a,b,c
a = 10
b= 10
c = a+b



log.info 'before assertion'
assert expectedName == actualName, "names are not matching expected name is $expectedName but actual name was $actualName" 
assert 20==c
log.info 'after  assertion'

def fruits =[ 'Banana', 'Grape', 'Mango']

assert true == fruits.contains('Apple'), "Can't find Apple in the list"

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Reading project artefacts" id="cfb1396e-071a-4ece-9f32-97607100f99b"><con:settings/><con:config><script>//Project artefacts


// Printing the releated testcase name ->  TC01_Groovy Stuff
log.info testRunner.testCase.name

// Printing the releated testsuite name ->  TS07_GroovyBasics
log.info testRunner.testCase.testSuite.name



// Printing project name -> MyProject
log.info testRunner.testCase.testSuite.project.name

// Printing workspace  name ->SoapuiDemo
log.info testRunner.testCase.testSuite.project.workspace.name

//Acceess a testcase from another testsuite
def myvalue = log.info testRunner.
							testCase.
										testSuite.
										project.
										getTestSuiteByName('TS01_Test suite to test bank service').
										getTestCaseByName('TC01_to test get Bank operation').name


//Looping through all test suites in project - method 1
def testSuiteMap = log.info testRunner.testCase.testSuite.project.testSuites

testSuiteMap.each{
	tsEntry -> 
	log.info tsEntry.value
}



//Looping through all test suites in project - method 2
def testSuiteList = log.info testRunner.testCase.testSuite.project.testSuiteList.name

testSuiteList.each{
	log.info it
}


//Looping through all test cases in a test suite

def testCaseList =log.info testRunner.testCase.testSuite.project.getTestSuiteByName('TS03_Test suite to test bank service').testCaseList.name

testCaseList.each{
	log.info it
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Reading data from file" id="8869bde5-06ff-4319-bed3-7c24de9c4b52"><con:settings/><con:config><script>def filePath = 'C:\\udemy\\udemy_doku\\WebserviceTesting_SoapUI\\6_Automation_With_Groovy\\blz-service-data.txt'
File file = new File(filePath)

//loop through file -> split values into variables

def blz,bezeichnung,bic,ort,plz

file.eachLine{
	line->
	log.info line
	def lineData = line.split(',')

	/*
	 *  55010111,SEB,ESSEDE5F550,Mainz a Rhein,55116
	 *  lineData = [55010111,SEB,ESSEDE5F550,Mainz a Rhein,55116]
	 */

	 blz = lineData[0]
	 bezeichnung = lineData[1]
	 bic = lineData[2]
	 ort = lineData[3]
	 plz = lineData[4]

	 log.warn "blz=$blz,  bezeichnung=$bezeichnung , bic=$bic  , ort=$ort  , plz= $plz "
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Methods" id="654f20f0-744d-4a9b-b6b3-2b5fbd934253"><con:settings/><con:config><script>def int addNumbers(int a, int b) {
	a+b  
}

def int substractNumbers(int a, int b) {
	a+b  
}


def int multiplyNumbers(int a, int b) {
	a*b  
}

def Integer  divideNumbers(int a, int b) {
	try{
	a/b  
	}catch (ArithmeticException e) {
		log.warn "Division with ZERO not allowed"
	}
}

int result = addNumbers(1,9)
log.info "result is $result"

result = substractNumbers(20,5)
log.info "result is $result"

result  = divideNumbers(200,4)
log.info "result is $result"

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Methods - Part2" id="50df6175-7a42-443e-b3e5-135df7d3440b"><con:settings/><con:config><script>boolean isPassed
String grade ='A'
isPassed =true


///Calling the method - if 
printExamResult(isPassed,grade)


def printExamResult(boolean isPassed,String grade){
	if(isPassed==true){
	log.info 'Congratulations'
	//consider the grade only when exam is passed
	printGradeMessage(grade)
	
	} else{
	log.error 'Better luck next time'
	}
}


def printGradeMessage(String grade){
	if(grade=='A'){
	log.info ' You got a car !! '
	}else if (grade == 'B'){
	log.warn 'You got a bike !!'
	} else{
	log.error 'You got Nothing !!'
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - SQL" id="6089fcdb-cf56-4cbe-b8e8-86e2e7b35e80"><con:settings/><con:config><script>import groovy.sql.Sql
//Read data from the database Table

String sqlStatement = 'SELECT * FROM CUSTOMER'

def databaseURL = 'jdbc:mysql://localhost:3306/myzone?user=root&amp;password=root'
def username = 'root'
def password = 'root'
def driverName = 'com.mysql.jdbc.Driver'

def sql = Sql.newInstance(databaseURL,username,password,driverName)

//Exewcute the statement

def myZoneID, firstName, lastName, phone, email

sql.eachRow(sqlStatement){
	row -> 
	myZoneID =   row['myZoneID']
	firstName =    row['firstName']
	lastName  =   row['lastName']
	phone = 		row ['phone']
	email =            row['email']

	log.info "myZoneID=$myZoneID, firstName=$firstName, lastName=$lastName, phone=$phone, email=$email"
	
	
}
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="86043b32-d077-4738-a115-101e4d7e7cc2" name="TS08 Groovy Automation"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="681b8ca2-1488-48e0-9767-5471290d956c" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC01_to test get Bank operation" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" name="get Bank - Request for BLZ code_55010111" id="dda634d3-86b5-4d56-8f0c-3e1b64f61d8f" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="get Bank - Request for BLZ code_55010111" id="d33c7d14-7004-47b3-8c8c-81b31449692d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>${#TestSuite#blzCode}</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6e559613-3060-41a2-b2d2-4a0a6911e8f8" name="SOAP Response"/><con:assertion type="XPath Match" id="253021b2-26c4-4038-a6fe-c8605fae6483" name="XPath Match - validate bic code"><con:configuration><path>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:bic[1]</path><content>ESSEDE5F550</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match - validate plz" id="3ab2876e-c328-4a91-a647-bea0072c1393"><con:configuration><path>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:plz[1]</path><content>55116</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="599f74d4-69ca-4296-ab00-4ea625b60ecc" name="XPath Match - validate bezeichnung"><con:configuration><path>declare namespace ns1='http://thomas-bayer.com/blz/';
//ns1:getBankResponse[1]/ns1:details[1]/ns1:bezeichnung[1]</path><content>SEB</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Schema Compliance" id="3a50fe9d-fe06-47ea-a02f-940828d57f1a" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="cf6a2d10-e073-467a-9944-a35aeb1270e2" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>NTLM</con:selectedAuthProfile><con:preemptive>true</con:preemptive><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes><con:authType>NTLM</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - calling test step" id="b96615ce-403b-4a1b-8891-c56297f2b9a5"><con:settings/><con:config><script>import groovy.util.XmlSlurper


//Calling test test step
def testStepName = 'get Bank - Request for BLZ code_55010111'

def testStep = testRunner.testCase.getTestStepByName(testStepName)


//Running the test step
def response = testStep.run(testRunner, context)


// create instance of XMLSlurper
def xmlSlurper = new XmlSlurper()

//parse the response
def envelope = xmlSlurper.parseText(response.responseContentAsXml)

log.info envelope

//Asserting the webserviice xml-based response
String expectedBICCode = "ESSEDE5F551"
// -> actual BicCode ready by using xpath-expression
String actualBICCode = envelope.Body.getBankResponse.details.bic

log.warn "expected l BIC Code is $expectedBICCode"
log.warn "acttual BIC Code is $actualBICCode"

assert expectedBICCode == actualBICCode, "BIC code not matching, expectted = $expectedBICCode, but actual is  $actualBICCode"





</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>ecd021d2-d2a0-4a54-a895-ccf62264ca36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="20e1d09c-f680-4ecb-a236-cf58a2d33da8" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC02_Data-driven txt-file testing using groovy" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" id="7b71051f-c8a5-4d62-b92e-1ddbe3b1b2dd" name="getBank"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="getBank" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="69def286-6830-4db1-9186-5aa53e2f2cfd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>20010020</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="4ff460b5-f0a4-4142-b83f-30684388a4e1" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-end-to-end testing - txt-file" id="b0b1abfe-1d39-40d4-aeb9-5674550a9bb0"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils
def requestXmlHolder, responseXmlHolder


//  Read bank service data from txt-file
//def filePath = "C:\\udemy\\udemy_doku\\WebserviceTesting_SoapUI\\6_Automation_With_Groovy\\blz-service-data.txt"
File file = new File("C:\\udemy\\udemy_doku\\WebserviceTesting_SoapUI\\6_Automation_With_Groovy\\blz-service-data.txt")
def lineData

// Create instance of GroovyUtils class and define run context
def groovyUtils = new GroovyUtils(context)

// - variables which will store value read from file -> use String cause otherwise assert will fail !
String blz,bezeichnung,bic,ort,plz

// - variables which will store value read from response  -> use String cause otherwise assert will fail !
String bezeichnungInResponse,bicInResponse,ortInResponse,plzInResponse



//-  loop through file and read the content
file.eachLine{
	line->
	lineData = line.split(',')

	/*
	 *  55010111,SEB,ESSEDE5F550,Mainz a Rhein,55116
	 *  lineData = [55010111,SEB,ESSEDE5F550,Mainz a Rhein,55116]
	 */

	 blz = lineData[0]
	 bezeichnung = lineData[1]
	 bic = lineData[2]
	 ort = lineData[3]
	 plz = lineData[4]

	 log.info "blz=$blz,  bezeichnung=$bezeichnung , bic=$bic  , ort=$ort  , plz= $plz "

	//c - call the getBank operation with BLZ code, that was read from file in the loop
	// -> in the getbank request the blz code must be updated !
	
	// -> extract the xml in getBank request an store in  requestXmlHolder variable
	 requestXmlHolder = groovyUtils.getXmlHolder("getBank#Request")

	 //updating the xml getBank request content >" &lt;blz:blz>20010020&lt;/blz:blz>"
	 //and updating the property value 
	 requestXmlHolder["blz:blz"] = blz
	 requestXmlHolder.updateProperty()

	 //call the getBank operation with BLZ code, that was read from file
	testRunner.testCase.getTestStepByName("getBank").run(testRunner,context)

	///storing response in responseXmlHolder
	 responseXmlHolder = groovyUtils.getXmlHolder('getBank#Response')


	 //parsing value from response using xpath and store into values
	 bezeichnungInResponse = responseXmlHolder["//ns1:bezeichnung"]
	 bicInResponse = responseXmlHolder["//ns1:bic"]
	 ortInResponse = responseXmlHolder["//ns1:ort"]
	 plzInResponse = responseXmlHolder["//ns1:plz"]

	 // loggin parsed data
	 log.warn "bezeichnungInResponse=$bezeichnungInResponse,bicInResponse=$bicInResponse, ortInResponse= $ortInResponse, plzInResponse=$plzInResponse"

	  //assert response data with data in file
	  /assert bezeichnung == bezeichnungInResponse
	  assert bic == bicInResponse
	  assert ort == ortInResponse
	  assert plz == plzInResponse*/
	 


	 
}




</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>7b71051f-c8a5-4d62-b92e-1ddbe3b1b2dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0b1abfe-1d39-40d4-aeb9-5674550a9bb0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="99f416be-e9ba-43d2-a446-79c629462110" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="TC03_Data-driven Excel-testing using groovy_xls" searchProperties="true" timeout="0"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="request" id="f0b41c5a-92c8-4582-b323-a9f13342d407" name="getBank" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="getBank" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="69def286-6830-4db1-9186-5aa53e2f2cfd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>20010020</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="4ff460b5-f0a4-4142-b83f-30684388a4e1" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-end-to-end testing -xls-file" id="2083d0de-8cec-4685-a7e7-59ddf295c969"><con:settings/><con:config><script>//Import the JXL libraries
import jxl.*
import jxl.write.*

//Import GroovyUttils
import com.eviware.soapui.support.GroovyUtils
def requestXmlHolder, responseXmlHolder


//  Read bank service data from txt-file
//def filePath = "C:\\udemy\\udemy_doku\\WebserviceTesting_SoapUI\\6_Automation_With_Groovy\\blz-service-data.txt"
File excelFile = new File("C:\\udemy\\udemy_doku\\WebserviceTesting_SoapUI\\6_Automation_With_Groovy\\BLZService.xls")

// -> /Create workbook instance
Workbook workbook = Workbook.getWorkbook(excelFile)

// -> Load the sheet
jxl.Sheet sheet = workbook.getSheet(0)

// -> Number of rows in the excel
int noOfRows = sheet.getRows()-1
log.info "noOfRows = $noOfRows"





// Create instance of GroovyUtils class and define run context
def groovyUtils = new GroovyUtils(context)

// - variables which will store value read from file -> use String cause otherwise assert will fail !
String blz,bezeichnung,bic,ort,plz

// - variables which will store value read from response  -> use String cause otherwise assert will fail !
String bezeichnungInResponse,bicInResponse,ortInResponse,plzInResponse



//-  loop through file and read the content
for(int rowIdx in 1..noOfRows){
	

	 blz = sheet.getCell(0,rowIdx).getContents()
	 bezeichnung = sheet.getCell(1,rowIdx).getContents()
	 bic = sheet.getCell(2,rowIdx).getContents()
	 ort = sheet.getCell(3,rowIdx).getContents()
	 plz = sheet.getCell(4,,rowIdx).getContents()

	 log.info "blz=$blz,  bezeichnung=$bezeichnung , bic=$bic  , ort=$ort  , plz= $plz "

	//c - call the getBank operation with BLZ code, that was read from file in the loop
	// -> in the getbank request the blz code must be updated !
	
	// -> extract the xml in getBank request an store in  requestXmlHolder variable
	 requestXmlHolder = groovyUtils.getXmlHolder("getBank#Request")

	 //updating the xml getBank request content >" &lt;blz:blz>20010020&lt;/blz:blz>"
	 //and updating the property value 
	 requestXmlHolder["blz:blz"] = blz
	 requestXmlHolder.updateProperty()

	 //call the getBank operation with BLZ code, that was read from file
	testRunner.testCase.getTestStepByName("getBank").run(testRunner,context)

	///storing response in responseXmlHolder
	 responseXmlHolder = groovyUtils.getXmlHolder('getBank#Response')

	 //parsing value from response using xpath and store into values
	 bezeichnungInResponse = responseXmlHolder["//ns1:bezeichnung"]
	 bicInResponse = responseXmlHolder["//ns1:bic"]
	 ortInResponse = responseXmlHolder["//ns1:ort"]
	 plzInResponse = responseXmlHolder["//ns1:plz"]

	 // loggin parsed data
	 log.warn "bezeichnungInResponse=$bezeichnungInResponse,bicInResponse=$bicInResponse, ortInResponse= $ortInResponse, plzInResponse=$plzInResponse"

	  //assert response data with data in file
	  /assert bezeichnung == bezeichnungInResponse
	  assert bic == bicInResponse
	  assert ort == ortInResponse
	  assert plz == plzInResponse*/
	 


	 
}




</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>7b71051f-c8a5-4d62-b92e-1ddbe3b1b2dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0b1abfe-1d39-40d4-aeb9-5674550a9bb0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>blzCode</con:name><con:value>55010111</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:requirements/><con:properties><con:property><con:name>username</con:name><con:value>matthias</con:value></con:property><con:property><con:name>password</con:name><con:value>test</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:jmsConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:parameters/><con:parameters/></con:reporting><con:reporting/><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest"><con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to SoapUI Pro tests

// If hardcoding the token, uncomment and change line 5
// def token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// def token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// def headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script></con:eventHandlers><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script></con:eventHandlers><con:authRepository/><con:tags/></con:soapui-project>